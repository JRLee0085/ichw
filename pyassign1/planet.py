{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import turtle\n",
    "import math\n",
    "\n",
    "def setpoint(t,a,b,color):\n",
    "    t.penup()\n",
    "    t.shape(\"circle\")               #设置行星的形状是圆的\n",
    "    t.color(color)                    #设置行星及轨道的颜色\n",
    "    t.goto(a,b*(-50))                 #设置起始位置\n",
    "    t.pendown()\n",
    "\n",
    "def drawfn(tl,tl1,tl2,tl3,tl4,tl5,n,a1,b1,a2,b2,a3,b3,a4,b4,a5,b5,a6,b6):\n",
    "    setpoint(tl,-30,b1,\"gray\")\n",
    "    setpoint(tl1,-71.4,b2,\"orange\")\n",
    "    setpoint(tl2,-111.8,b3,\"blue\")\n",
    "    setpoint(tl3,-132.3,b4,\"yellow\")\n",
    "    setpoint(tl4,-150,b5,\"brown\")\n",
    "    setpoint(tl5,-192.6,b6,\"sea green\")\n",
    "    while n>=0:\n",
    "        n=n+0.01\n",
    "        x=math.sin(6*n)                           # 过程中n前面所乘的数字是相对的角速度\n",
    "        y=-math.cos(6*n)                          # 为了简便，这里不妨设置角速度比例为6:5:4:3:2:1 \n",
    "        scaledX, scaledY = x * 50, y * 50         # 所以与实际有所差异\n",
    "        x1=math.sin(5*n)\n",
    "        y1=-math.cos(5*n)\n",
    "        scaledX1, scaledY1 = x1 * 50, y1 * 50\n",
    "        x2=math.sin(4*n)\n",
    "        y2=-math.cos(4*n)\n",
    "        scaledX2, scaledY2 = x2 * 50, y2 * 50\n",
    "        x3=math.sin(3*n)\n",
    "        y3=-math.cos(3*n)\n",
    "        scaledX3, scaledY3 = x3 * 50, y3 * 50\n",
    "        x4=math.sin(2*n)\n",
    "        y4=-math.cos(2*n)\n",
    "        scaledX4, scaledY4 = x4 * 50, y4 * 50\n",
    "        x5=math.sin(n)\n",
    "        y5=-math.cos(n)\n",
    "        scaledX5, scaledY5 = x5 * 50, y5 * 50\n",
    "        tl.goto(a1*scaledX-30,b1*scaledY)              #设置六个行星以焦点相同的轨迹进行椭圆运动\n",
    "        tl1.goto(a2*scaledX1-71.4,b2*scaledY1)         #减去的值是由下面所赋的值所决定的\n",
    "        tl2.goto(a3*scaledX2-111.8,b3*scaledY2)        # 所减的值的算法是 50*(a**2-b**2)*0.5-30\n",
    "        tl3.goto(a4*scaledX3-132.3,b4*scaledY3)        #再减去的30是为了让焦点在(0,0)\n",
    "        tl4.goto(a5*scaledX4-150,b5*scaledY4)\n",
    "        tl5.goto(a6*scaledX5-192.6,b6*scaledY5)             \n",
    "    tl.penup()\n",
    "    tl1.penup()\n",
    "    tl2.penup()\n",
    "    tl3.penup()\n",
    "    tl4.penup()\n",
    "    tl5.penup()\n",
    "def main():\n",
    "    wn=turtle.Screen()\n",
    "    wn.bgcolor(\"black\")\n",
    "    wn.screensize(1200,800)\n",
    "    tl=turtle.Turtle()\n",
    "    tl1=turtle.Turtle()\n",
    "    tl2=turtle.Turtle()\n",
    "    tl3=turtle.Turtle()\n",
    "    tl4=turtle.Turtle()\n",
    "    tl5=turtle.Turtle()\n",
    "    tl6=turtle.Turtle()\n",
    "    tl6.color(\"red\")                                            #画一个火红的大太阳！（并不）\n",
    "    tl6.dot(30,\"red\")\n",
    "    drawfn(tl,tl1,tl2,tl3,tl4,tl5,0,1 ,0.8, 2, 1.4 ,3, 2, 4, 3, 5, 4, 6, 4.6)   #这里为了简便，所赋的各个椭圆a,b与实际偏差较大\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

